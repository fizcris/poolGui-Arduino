///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                             INCLUDES
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <Arduino.h>
#include <frameProcessor.h>
#include<NoDelay.h>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                            Test vars
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int desiredState = 0;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                            Global Variables
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int desiredTempPool = 150;
int desiredTempFloor = 150;
noDelay periodicUpdate(1000);   //MCU -> RPI    Periodic update timmer
noDelay criticalUpdate(100);   //MCU -> RPI    Periodic update timmer
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                             Includes dependent on global vars
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <scenarios.h>
#include <parseCommander.h>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                            Setup
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup() 
{
    Serial.begin(115200);
    delay(100);
    Serial2.begin(115200);
    delay(100);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                            Loop
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop() 
{
    parseSerialCommand();
    if(periodicUpdate.update())    //Checks to see if set time has past 
{
        SendFrameWord(TEMP_HEATER,random(100, 400) );
        delay(10);
        SendFrameWord(TEMP_POOL, random(100, 400));
        delay(10);
        SendFrameWord(TEMP_FLOOR, random(100, 400));
        delay(10);
        SendFrameWord(HG_ROOM, desiredState);
        delay(10);
        SendFrameWord(TEMP_POOL_IMP,random(100, 400));
        delay(10);
        SendFrameWord(TEMP_FLOOR_IMP, random(100, 400));
        delay(10);
        SendFrameWord(TEMP_RETURN, random(100, 400));
        delay(10);
        SendFrameWord(TEMP_SERIES, random(100, 400));
        delay(10);
        SendFrameWord(PRESS_RETURN, random(100, 400));
        delay(10);
    }
    if(criticalUpdate.update())  {
        SendFrameWord(DESIRED_TEPM_POOL, desiredTempPool );
        delay(10);
        SendFrameWord(DESIRED_TEMP_FLOOR,desiredTempFloor );
        delay(10);
        SendFrameWord(HG_ROOM, desiredState);
        delay(10);

    }
}

